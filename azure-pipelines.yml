trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'user_service/*'

pool:
  name: 'Default'

variables:
  serviceName: 'user-service'
  harborRepo: 'harbor.cloudpro.com.tr/helpdesk/$(serviceName)'
  imageTag: '$(Build.BuildId)'
  buildContext: 'dir://$(Build.SourcesDirectory)' # Kaniko için doğru context formatı
  dockerfilePath: '$(Build.SourcesDirectory)/$(serviceName)/Dockerfile'
  namespace: 'ado-agents'
  podName: 'kaniko-build-pod-$(imageTag)'
  k8sConnection: 'RKE2-Kubeconfig-Connection' # Bir önceki adımda oluşturduğun bağlantı adı

stages:
- stage: BuildWithKaniko
  displayName: 'Build and Push with Kaniko'
  jobs:
  - job: KanikoJob
    displayName: 'Build Image for $(serviceName)'
    steps:
    - task: Bash@3
      displayName: 'Create Kaniko Pod Manifest from Template'
      inputs:
        targetType: 'inline'
        script: |
          # Şablon dosyasını kopyalayıp nihai dosyayı oluştur
          cp $(Build.SourcesDirectory)/kaniko-pod-template.yaml $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          
          # sed komutu ile yer tutucuları gerçek değerlerle değiştir
          sed -i "s|__POD_NAME__|$(podName)|g" $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          sed -i "s|__CONTEXT__|$(buildContext)|g" $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          sed -i "s|__DOCKERFILE__|$(dockerfilePath)|g" $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          sed -i "s|__DESTINATION_TAG__|$(harborRepo):$(imageTag)|g" $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          sed -i "s|__DESTINATION_LATEST__|$(harborRepo):latest|g" $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml
          
          echo "Final Kaniko pod manifest created:"
          cat $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml

    - task: Kubernetes@1
      displayName: 'Run Kaniko Pod from Manifest'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sConnection)'
        namespace: '$(namespace)'
        command: 'apply'
        # Önceki adımda oluşturduğumuz nihai dosyayı kullanıyoruz
        arguments: '-f $(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml'

    - task: Kubernetes@1
      displayName: 'Wait for Kaniko Pod to Complete'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sConnection)'
        namespace: '$(namespace)'
        command: 'wait'
        arguments: 'pod/$(podName) --for=condition=Succeeded --timeout=10m'

    - task: Kubernetes@1
      displayName: 'Get Kaniko Pod Logs'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sConnection)'
        namespace: '$(namespace)'
        command: 'logs'
        arguments: '$(podName)'

    - task: Kubernetes@1
      displayName: 'Delete Kaniko Pod'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sConnection)'
        namespace: '$(namespace)'
        command: 'delete'
        # --ignore-not-found=true, pod zaten --cleanup ile silinmişse hata vermesini önler
        arguments: 'pod $(podName) --ignore-not-found=true'