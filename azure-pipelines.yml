# azure-pipelines.yml - Final Sürüm

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'user_service/*'

pool:
  name: 'Default' # Lütfen bu adı kendi ADO Pool adın ile değiştir

variables:
  serviceName: 'user-service'
  harborRepo: 'harbor.cloudpro.com.tr/helpdesk/$(serviceName)'
  imageTag: '$(Build.BuildId)'
  buildContext: 'dir://$(Build.SourcesDirectory)'
  dockerfilePath: '$(Build.SourcesDirectory)/$(serviceName)/Dockerfile'
  namespace: 'ado-agents'
  podName: 'kaniko-build-pod-$(imageTag)'
  kanikoTemplateFile: '$(Build.SourcesDirectory)/kaniko-pod-template.yaml'
  kanikoFinalFile: '$(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml'

stages:
- stage: BuildWithKaniko
  displayName: 'Build and Push with Kaniko'
  jobs:
  - job: KanikoJob
    displayName: 'Build Image for $(serviceName)'
    steps:

    # Adım 1: Şablonu alıp, içindeki değişkenleri doldurarak nihai YAML'ı oluştur.
    - task: Bash@3
      displayName: 'Create Final Kaniko Manifest from Template'
      inputs:
        targetType: 'inline'
        script: |
          echo "Creating final manifest from template..."
          # Şablon dosyasını geçici bir alana kopyala
          cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)"
          
          # sed komutu ile şablondaki yer tutucuları pipeline değişkenleri ile değiştir
          sed -i "s|__POD_NAME__|$(podName)|g" "$(kanikoFinalFile)"
          sed -i "s|__CONTEXT__|$(buildContext)|g" "$(kanikoFinalFile)"
          sed -i "s|__DOCKERFILE__|$(dockerfilePath)|g" "$(kanikoFinalFile)"
          sed -i "s|__DESTINATION_TAG__|$(harborRepo):$(imageTag)|g" "$(kanikoFinalFile)"
          sed -i "s|__DESTINATION_LATEST__|$(harborRepo):latest|g" "$(kanikoFinalFile)"
          
          echo "Final Kaniko pod manifest content:"
          cat "$(kanikoFinalFile)"

    # Adım 2: Önceki adımda oluşturduğumuz nihai ve temiz YAML dosyasını uygula.
    - task: Kubernetes@1
      displayName: 'Apply Kaniko Pod Manifest'
      inputs:
        connectionType: 'None' # Ajanın kendi kimliğini kullan
        namespace: '$(namespace)'
        command: 'apply'
        arguments: '-f $(kanikoFinalFile)'

    # Adım 3: Kaniko pod'unun işini bitirmesini bekle.
    - task: Kubernetes@1
      displayName: 'Wait for Kaniko Pod to Complete'
      inputs:
        connectionType: 'None'
        namespace: '$(namespace)'
        command: 'wait'
        arguments: 'pod/$(podName) --for=condition=Succeeded --timeout=10m'

    # Adım 4: Kaniko pod'unun loglarını göster (hata ayıklama için).
    - task: Kubernetes@1
      displayName: 'Get Kaniko Pod Logs'
      inputs:
        connectionType: 'None'
        namespace: '$(namespace)'
        command: 'logs'
        arguments: '$(podName)'
        failOnStdErr: false # Loglarda hata olsa bile pipeline'ı durdurma

    # Adım 5: İşi biten Kaniko pod'unu silerek cluster'ı temizle.
   