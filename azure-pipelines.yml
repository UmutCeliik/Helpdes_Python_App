trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'user_service/*'

pool:
  name: 'Default'

variables:
  # Değişkenleri aynı şekilde tutuyoruz
  serviceName: 'user-service'
  harborRepo: 'harbor.cloudpro.com.tr/helpdesk/$(serviceName)'
  imageTag: '$(Build.BuildId)'
  buildContext: '$(Build.SourcesDirectory)'
  dockerfilePath: '$(Build.SourcesDirectory)/$(serviceName)/Dockerfile'
  namespace: 'ado-agents'
  harborSecretName: 'harbor-credentials'

stages:
- stage: BuildWithKaniko
  displayName: 'Build and Push with Kaniko'
  jobs:
  - job: KanikoJob
    displayName: 'Build Image for $(serviceName)'
    steps:
    - task: Kubernetes@1
      displayName: 'Run Kaniko Pod to Build and Push Image'
      inputs:
        # --- EN ÖNEMLİ DEĞİŞİKLİK ---
        # Artık harici bir bağlantı belirtmiyoruz.
        # Bu görev, ajanın içindeki Service Account'u otomatik olarak algılayacak.
        connectionType: 'None' 
        # kubernetesServiceEndpoint: ... satırını tamamen siliyoruz.
        # --- DEĞİŞİKLİK SONU ---
        namespace: '$(namespace)'
        command: 'run'
        arguments: >-
          kaniko-build-pod-$(imageTag)
          --image=gcr.io/kaniko-project/executor:latest
          --restart=Never
          --image-pull-policy=IfNotPresent
          --overrides='{ "spec": { "volumes": [ { "name": "docker-config-volume", "secret": { "secretName": "$(harborSecretName)", "items": [ { "key": ".dockerconfigjson", "path": "config.json" } ] } } ], "containers": [ { "name": "kaniko", "volumeMounts": [ { "name": "docker-config-volume", "mountPath": "/kaniko/.docker/" } ] } ] } }'
          -- --context=dir://$(buildContext) --dockerfile=$(dockerfilePath) --destination=$(harborRepo):$(imageTag) --destination=$(harborRepo):latest --cleanup