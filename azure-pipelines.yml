# azure-pipelines.yml - Paylaşımlı Alan Modeli (Değişken Kullanımı Düzeltilmiş)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'user_service/*'

pool:
  name: 'Default'

variables:
  serviceName: 'user_service'
  harborRepo: 'harbor.cloudpro.com.tr/helpdesk/$(serviceName)'
  imageTag: '$(Build.BuildId)'
  k8sNamespace: 'ado-agents'
  gitRepoUrl: 'https://dev.azure.com/umutcelik0234/HelpDesk_App/_git/helpdesk-app-src'
  kanikoTemplateFile: 'kaniko-pod-template.yaml'
  kanikoFinalFile: '$(Build.ArtifactStagingDirectory)/kaniko-pod-final.yaml'

stages:
- stage: Build
  displayName: 'Build and Push Service Image'
  jobs:
  - job: BuildImage
    displayName: 'Build $(serviceName) Image'
    # Bu ayar, System.AccessToken'ın kullanılabilir olmasını sağlar.
    # Genellikle varsayılan olarak ajanın yetkisi dahilindedir, 
    # ancak açıkça belirtmek iyi bir pratiktir.
    steps:
    - task: Bash@3
      displayName: '1. Prepare Kaniko Pod Manifest'
      # System.AccessToken'ı AZP_TOKEN adlı bir ortam değişkenine atıyoruz.
      env:
        AZP_TOKEN: $(System.AccessToken)
      inputs:
        targetType: 'inline'
        script: |
          echo "Preparing manifest for build $(imageTag)..."
          cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)"
          
          # DÜZELTME: Değişkenleri shell formatında ($VAR) kullanıyoruz.
          sed -i "s|__POD_NAME__|kaniko-build-$(imageTag)|g" "$(kanikoFinalFile)"
          sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)"
          sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)"
          sed -i "s|__DESTINATION_TAG__|$(harborRepo):$(imageTag)|g" "$(kanikoFinalFile)"
          sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)"
          
          echo "--- Final Kaniko Pod Manifest (token gizlenmiş) ---"
          # DÜZELTME: Değişkeni yine shell formatında ($VAR) kullanıyoruz.
          cat "$(kanikoFinalFile)" | sed "s/$AZP_TOKEN/********/g"

    - task: Kubernetes@1
      displayName: '2. Apply Kaniko Pod to Cluster'
      inputs:
        connectionType: 'None'
        namespace: '$(k8sNamespace)'
        command: 'apply'
        arguments: '-f $(kanikoFinalFile)'
        
    - task: Kubernetes@1
      displayName: '3. Wait for Kaniko Pod to Complete'
      inputs:
        connectionType: 'None'
        namespace: '$(k8sNamespace)'
        command: 'wait'
        arguments: 'pod/kaniko-build-$(imageTag) --for=condition=Succeeded --timeout=15m'

    - task: Kubernetes@1
      displayName: '4. Get Kaniko Pod Logs (for debugging)'
      condition: always()
      inputs:
        connectionType: 'None'
        namespace: '$(k8sNamespace)'
        command: 'logs'
        arguments: 'pod/kaniko-build-$(imageTag)'
        failOnStdErr: false

    - task: Kubernetes@1
      displayName: '5. Cleanup: Delete Kaniko Pod'
      condition: always()
      inputs:
        connectionType: 'None'
        namespace: '$(k8sNamespace)'
        command: 'delete'
        arguments: 'pod/kaniko-build-$(imageTag) --ignore-not-found=true'