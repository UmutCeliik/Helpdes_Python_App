# azure-pipelines.yml - Aşama 1 (YENİ VE DOĞRU YÖNTEM)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'user_service/*'

pool:
  name: 'Default'

variables:
  serviceName: 'user_service'
  harborRepo: 'harbor.cloudpro.com.tr/helpdesk/$(serviceName)'
  imageTag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build and Push Service Image'
  jobs:
  - job: BuildImage
    displayName: 'Build $(serviceName) Image'
    
    # İŞİN KONTEYNER İÇİNDE ÇALIŞMASINI SAĞLIYAN BLOK
    container:
      image: gcr.io/kaniko-project/executor:latest
      # Harbor'a erişim için oluşturduğumuz Servis Bağlantısını bağlıyoruz.
      # Bu, Kaniko konteyneri içinde /kaniko/.docker/config.json dosyasını otomatik oluşturur.
      endpoint: HarborServiceConnection 

    steps:
    # 1. Adım: Kaynak kod, 'container' bloğu sayesinde zaten bu konteynerin içine
    #          otomatik olarak checkout edilir. Ek bir işlem gerekmez.
    - checkout: self

    # 2. Adım: Doğrudan Kaniko executor komutunu çalıştırıyoruz.
    - task: Bash@3
      displayName: 'Build and Push with Kaniko'
      script: |
        # /kaniko/executor komutu, container'ın PATH'inde olduğu için doğrudan çağrılabilir.
        /kaniko/executor \
          --context=$(Pipeline.Workspace)/s \
          --context-sub-path=$(serviceName) \
          --dockerfile=$(Pipeline.Workspace)/s/$(serviceName)/Dockerfile \
          --destination=$(harborRepo):$(imageTag)