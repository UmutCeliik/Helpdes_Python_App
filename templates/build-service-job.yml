# templates/build-service-job.yml
# Hatalı 'resources' bloğu kaldırıldı ve Library'deki değişkenleri kullanacak şekilde güncellendi.

parameters:
  - name: serviceName
    type: string
  - name: sonarProjectKey
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: condition
    type: string
    default: succeeded()

jobs:
  - job: Build_${{ parameters.serviceName }}
    displayName: "Scan & Build for ${{ parameters.serviceName }}"
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    timeoutInMinutes: 45

    variables:
      serviceName: ${{ parameters.serviceName }}
      sonarProjectKey: ${{ parameters.sonarProjectKey }}
      NEXUS_USERNAME: $(NexusUsername)
      NEXUS_PASSWORD: $(NexusPassword)
      NEXUS_URL: $(NexusUrl)
      # NEXUS_HOST'u NEXUS_URL'den türetmek daha tutarlı
      # NOT: Bu regex, URL'den host'u çekmek için basit bir örnektir.
      # Daha karmaşık URL'ler için daha sağlam bir parser gerekebilir.
      NEXUS_HOST: $(NexusUrl:https://([^/]+).*$) # Sadece host kısmını çeker

    steps:
      - checkout: self

      # # ===================================================================
      # # BÖLÜM 1: SCA TARAMA POD'U (Mevcut haliyle devam edebilir, Nexus ayarları sca-pod-template içinde yapıldı)
      # # ===================================================================
      # - task: Bash@3
      #   # ... Bu bölüm önceki gibi aynı kalıyor ...
      #   name: PrepareScaManifest
      #   displayName: '1a. Prepare SCA Pod Manifest'
      #   env:
      #     AZP_TOKEN: $(System.AccessToken)
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       echo "Preparing SCA manifest for service: $(serviceName)..."
      #       if [[ "$(serviceName)" == "frontend" ]]; then SCANNER_IMAGE="node:20-slim"; SERVICE_TYPE="frontend"; else SCANNER_IMAGE="python:3.11-slim"; SERVICE_TYPE="backend"; fi
      #       safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g'); scaPodName="sca-$(imageTag)-$safePodSuffix"; echo "##vso[task.setvariable variable=scaPodName]$scaPodName"
      #       cp templates/sca-pod-template.yaml "$(kanikoFinalFile)-sca-$(serviceName)"
      #       sed -i "s|__POD_NAME__|$scaPodName|g" "$(kanikoFinalFile)-sca-$(serviceName)"; sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sca-$(serviceName)"; sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sca-$(serviceName)"; sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-sca-$(serviceName)"; sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$(kanikoFinalFile)-sca-$(serviceName)"; sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$(kanikoFinalFile)-sca-$(serviceName)"
      # # ... Diğer SCA adımları aynı kalır ...
      # - task: Kubernetes@1
      #   displayName: '1b. Apply & Run SCA Pod'
      #   inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-sca-$(serviceName)' }
      # - task: Bash@3
      #   displayName: '1c. Wait for SCA Pod to Complete & Get Logs'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       echo "Waiting for pod $(scaPodName) to finish..."; kubectl wait --for=condition=Ready pod/$(scaPodName) --timeout=5m -n $(k8sNamespace); kubectl logs $(scaPodName) -n $(k8sNamespace) -c scanner --follow
      # - task: Kubernetes@1
      #   displayName: '1d. Cleanup SCA Pod'
      #   condition: always()
      #   inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(scaPodName) --ignore-not-found=true' }

      # ===================================================================
      # BÖLÜM 2: SONARQUBE TARAMA POD'U
      # ===================================================================
      - task: Kubernetes@1
        displayName: "2b. Apply & Run SonarQube Pod"
        inputs:
          {
            connectionType: "None",
            namespace: "$(k8sNamespace)",
            command: "apply",
            arguments: "-f $(kanikoFinalFile)-sonar-$(serviceName)",
          }

      - task: Bash@3
        name: PrepareSonarManifest
        displayName: "2a. Prepare SonarQube Pod Manifest"
        env:
          # DÜZELTME: Library'den gelen değişkenleri basit shell değişkenlerine atıyoruz.
          AZP_TOKEN_FROM_PIPELINE: $(System.AccessToken)
          SONAR_URL_FROM_PIPELINE: $(SONAR_URL)
          SONAR_TOKEN_FROM_PIPELINE: $(SONAR_TOKEN)
          SONAR_KEY_FROM_PIPELINE: $(sonarProjectKey)
        inputs:
          targetType: "inline"
          script: |
            echo "Preparing SonarQube manifest for service: $(serviceName)..."
            echo "--- Verifying variables from Library ---"
            echo "Sonar URL is: $SONAR_URL_FROM_PIPELINE"
            echo "Sonar Project Key is: $SONAR_KEY_FROM_PIPELINE"

            safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
            sonarPodName="sonar-$(imageTag)-$safePodSuffix"
            echo "##vso[task.setvariable variable=sonarPodName]$sonarPodName"
            cp templates/sonar-pod-template.yaml "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__POD_NAME__|$sonarPodName|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__AZP_TOKEN__|$AZP_TOKEN_FROM_PIPELINE|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__SONAR_URL__|$SONAR_URL_FROM_PIPELINE|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__SONAR_TOKEN__|$SONAR_TOKEN_FROM_PIPELINE|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
            sed -i "s|__PROJECT_KEY__|$SONAR_KEY_FROM_PIPELINE|g" "$(kanikoFinalFile)-sonar-$(serviceName)"

      - task: Bash@3
        displayName: "2c. Wait for SonarQube Pod to Complete & Get Logs"
        inputs:
          targetType: "inline"
          script: |
            echo "Waiting for pod $(sonarPodName) to finish..."; kubectl wait --for=condition=Ready pod/$(sonarPodName) --timeout=5m -n $(k8sNamespace); kubectl logs $(sonarPodName) -n $(k8sNamespace) -c sonarqube-scanner --follow
            # SonarQube kalite geçidi durumunu kontrol et
            # NOT: SONAR_URL'de host alias veya sertifika sorunu varsa burası hata verebilir.
            # Eğer curl burada hata verirse, curl için --insecure eklemen gerekebilir.
            SONAR_STATUS=$(curl -s -u $(SONAR_TOKEN): "$(SONAR_URL)/api/qualitygates/project_status?projectKey=$(sonarProjectKey)" | jq -r .projectStatus.status)
            echo "SonarQube Quality Gate Status: $SONAR_STATUS"
            if [ "$SONAR_STATUS" != "OK" ]; then
                echo "##vso[task.logissue type=error;]SonarQube Quality Gate failed for project $(sonarProjectKey)."
                # Bu değişkeni ayarla, böylece sonraki adımlarda kullanabilirsin.
                echo "##vso[task.setvariable variable=sonar_status;isOutput=true]FAILED"
                exit 1 # Kalite geçidi başarısız olursa build'i durdur
            else
                echo "##vso[task.setvariable variable=sonar_status;isOutput=true]OK"
            fi
      - task: Kubernetes@1
        displayName: "2d. Cleanup SonarQube Pod"
        condition: always()
        inputs:
          {
            connectionType: "None",
            namespace: "$(k8sNamespace)",
            command: "delete",
            arguments: "pod/$(sonarPodName) --ignore-not-found=true",
          }

      # # ===================================================================
      # # BÖLÜM 3: KANIKO BUILD POD'U
      # # ===================================================================
      # # ... KANIKO ve Redmine adımları aynı şekilde devam eder ...
      # - task: Bash@3
      #   name: PrepareKanikoManifest
      #   displayName: '3a. Prepare Kaniko Manifest'
      #   env:
      #     AZP_TOKEN: $(System.AccessToken)
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g'); kanikoPodName="kaniko-build-$(imageTag)-$safePodSuffix"; echo "##vso[task.setvariable variable=kanikoPodName]$kanikoPodName"
      #       cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__POD_NAME__|$kanikoPodName|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
      # - task: Kubernetes@1
      #   displayName: '3b. Apply & Run Kaniko Pod'
      #   inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-kaniko-$(serviceName)' }
      # - task: Bash@3
      #   displayName: '3c. Wait for Kaniko Pod to Complete & Get Logs'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       echo "Waiting for pod $(kanikoPodName) to start..."; kubectl wait --for=condition=Ready pod/$(kanikoPodName) --timeout=15m -n $(k8sNamespace); kubectl logs $(kanikoPodName) -n $(k8sNamespace) -c kaniko --follow
      # - task: Kubernetes@1
      #   displayName: '3d. Cleanup Kaniko Pod'
      #   condition: always()
      #   inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(kanikoPodName) --ignore-not-found=true' }

      # BÖLÜM 4: ARTIFACT'LARI NEXUS'A YAYINLAMA

      # Python servisleri için yayınlama (User Service)
      - task: Bash@3
        displayName: "4a. Publish Python Artifacts to Nexus (User Service)"
        inputs:
          targetType: "inline"
          script: |
            set -e
            echo "Building Python distribution for ${{ parameters.serviceName }}..."
            cp $(Build.SourcesDirectory)/${{ parameters.serviceName }}/requirements.txt .
            cp $(Build.SourcesDirectory)/${{ parameters.serviceName }}/setup.py . 
            pip install -r requirements.txt
            pip install wheel twine
            python setup.py sdist bdist_wheel

            echo "Publishing Python artifacts to Nexus hosted repository..."
            REQUESTS_VERIFY=false TWINE_USERNAME=$(NEXUS_USERNAME) TWINE_PASSWORD=$(NEXUS_PASSWORD) twine upload \
                                 --repository-url $(NEXUS_URL)/repository/helpdesk-python-hosted/ \
                                 dist/*
            echo "Python artifacts published successfully to Nexus."
        workingDirectory: "$(Build.SourcesDirectory)/${{ parameters.serviceName }}"
        condition: and(succeeded(), eq('${{ parameters.serviceName }}', 'user_service'), eq(variables['sonar_status'], 'OK'))

      # Python servisleri için yayınlama (Ticket Service)
      - task: Bash@3
        displayName: "4a.1. Publish Python Artifacts to Nexus (Ticket Service)"
        inputs:
          targetType: "inline"
          script: |
            set -e
            echo "Building Python distribution for ${{ parameters.serviceName }}..."
            cp $(Build.SourcesDirectory)/${{ parameters.serviceName }}/requirements.txt .
            cp $(Build.SourcesDirectory)/${{ parameters.serviceName }}/setup.py .
            pip install -r requirements.txt
            pip install wheel twine
            python setup.py sdist bdist_wheel

            echo "Publishing Python artifacts to Nexus hosted repository..."
            REQUESTS_VERIFY=false TWINE_USERNAME=$(NEXUS_USERNAME) TWINE_PASSWORD=$(NEXUS_PASSWORD) twine upload \
                                 --repository-url $(NEXUS_URL)/repository/helpdesk-python-hosted/ \
                                 dist/*
            echo "Python artifacts published successfully to Nexus."
        workingDirectory: "$(Build.SourcesDirectory)/${{ parameters.serviceName }}"
        condition: and(succeeded(), eq('${{ parameters.serviceName }}', 'ticket_service'), eq(variables['sonar_status'], 'OK'))

      # Frontend build çıktısını Nexus Raw'a arşivleme
      - task: Bash@3
        displayName: "4b. Archive Frontend Build to Nexus Raw"
        inputs:
          targetType: "inline"
          script: |
            set -e
            echo "Archiving frontend build output to Nexus Raw repository..."
            tar -czvf frontend-dist-$(Build.BuildId).tar.gz dist/

            echo "Uploading frontend static files to Nexus Raw repository..."
            curl -v --insecure -u $(NEXUS_USERNAME):$(NEXUS_PASSWORD) \
                 --upload-file frontend-dist-$(Build.BuildId).tar.gz \
                 $(NEXUS_URL)/repository/frontend-static-files/frontend-dist-$(Build.BuildId).tar.gz
            echo "Frontend static files archived to Nexus Raw."
        workingDirectory: "$(Build.SourcesDirectory)/${{ parameters.serviceName }}"
        condition: and(succeeded(), eq('${{ parameters.serviceName }}', 'frontend'), eq(variables['sonar_status'], 'OK'))

      # BÖLÜM 5: SBOM Üretimi ve Nexus'a Yükleme (Örnek)
      - task: Bash@3
        displayName: "5. Generate and Upload SBOM to Nexus"
        inputs:
          targetType: "inline"
          script: |
            set -e
            echo "Generating SBOM for ${{ parameters.serviceName }}..."
            # Python için örnek SBOM oluşturma (cyclonedx-python)
            if [[ "${{ parameters.serviceName }}" == "user_service" || "${{ parameters.serviceName }}" == "ticket_service" ]]; then
              pip install cyclonedx-bom
              cyclonedx-bom -o sbom.json
            elif [[ "${{ parameters.serviceName }}" == "frontend" ]]; then
              npm install -g @cyclonedx/cyclonedx-npm # Global kurulum, daha önce yapılmamışsa
              cyclonedx-npm -o sbom.json
            fi

            SBOM_FILE="sbom-$(Build.BuildId)-${{ parameters.serviceName }}.json"
            mv sbom.json "$SBOM_FILE"

            echo "Uploading SBOM to Nexus Raw repository..."
            curl -v --insecure -u $(NEXUS_USERNAME):$(NEXUS_PASSWORD) \
                 --upload-file "$SBOM_FILE" \
                 $(NEXUS_URL)/repository/sbom-reports/$SBOM_FILE
            echo "SBOM uploaded to Nexus."
        workingDirectory: "$(Build.SourcesDirectory)/${{ parameters.serviceName }}"
        condition: succeeded() # SBOM her zaman oluşturulmalı, hata olsa bile (analiz için)


    # - task: Bash@3
    #   displayName: 'Update Redmine Issue'
    #   condition: succeeded()
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       ISSUE_ID=$(git log -1 --pretty=%B | grep -o '#[0-9]*' | sed 's/#//'); if [ -z "$ISSUE_ID" ]; then echo "Commit mesajında Redmine issue ID'si bulunamadı."; exit 0; fi; echo "Redmine Issue #$ISSUE_ID güncelleniyor..."; STATUS_ID_IN_PROGRESS=2; JSON_PAYLOAD=$(cat <<EOF
    #       { "issue": { "notes": "CI pipeline, $(serviceName) servisi için başarıyla tamamlandı. Build: $(Build.BuildId). Link: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)", "status_id": $STATUS_ID_IN_PROGRESS } }
    #       EOF
    #       ); HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Content-Type: application/json" -H "X-Redmine-API-Key: $(REDMINE_API_KEY)" -d "$JSON_PAYLOAD" "$(REDMINE_URL)/issues/$ISSUE_ID.json"); if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then echo "Redmine Issue #$ISSUE_ID başarıyla güncellendi. (HTTP Status: $HTTP_STATUS)"; else echo "##vso[task.logissue type=error]Redmine Issue güncellenirken hata oluştu. HTTP Status: $HTTP_STATUS"; exit 1; fi
