# templates/build-service-job.yml
# Değişken aktarımını düzelten nihai sürüm.

parameters:
- name: serviceName
  type: string
- name: dependsOn
  type: object
  default: []
- name: condition
  type: string
  default: succeeded()

jobs:
- job: Build_${{ parameters.serviceName }}
  displayName: 'Build Image for ${{ parameters.serviceName }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  
  variables:
    serviceName: ${{ parameters.serviceName }} 
  
  steps:
  - task: Bash@3
    # Bu göreve bir isim veriyoruz (name: PrepareManifest)
    # Bu sayede sonraki adımlarda onun oluşturduğu değişkene referans verebiliriz.
    name: PrepareManifest
    displayName: '1. Prepare Kaniko Pod Manifest for ${{ parameters.serviceName }}'
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        echo "Preparing manifest for build $(imageTag) for service: $(serviceName)..."
        
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        finalPodName="kaniko-build-$(imageTag)-$safePodSuffix"
        
        # YENİ EKLENEN SATIR:
        # 'finalPodName' shell değişkeninin değerini, işin geri kalanında kullanılabilecek
        # 'safePodName' adında bir pipeline değişkeni olarak ayarlıyoruz.
        echo "##vso[task.setvariable variable=safePodName]$finalPodName"
        
        finalManifestFile="$(kanikoFinalFile)-$(serviceName)"
        cp "$(kanikoTemplateFile)" "$finalManifestFile"
        
        sed -i "s|__POD_NAME__|$finalPodName|g" "$finalManifestFile"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$finalManifestFile"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$finalManifestFile"
        sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$finalManifestFile"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$finalManifestFile"
        
        echo "--- Final Kaniko Pod Manifest for $(serviceName) ---"
        cat "$finalManifestFile" | sed "s/$AZP_TOKEN/********/g"

  - task: Kubernetes@1
    displayName: '2. Apply Kaniko Pod for ${{ parameters.serviceName }}'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-${{ parameters.serviceName }}'
      
  - task: Kubernetes@1
    displayName: '3. Follow Logs for ${{ parameters.serviceName }}'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'logs'
      # DÜZELTME: Artık karmaşık bir ifade yerine, bir önceki adımda
      # oluşturduğumuz temiz ve güvenilir değişkeni kullanıyoruz.
      arguments: 'pod/$(safePodName) --follow --container=kaniko'
      
  - task: Kubernetes@1
    displayName: '4. Cleanup Pod for ${{ parameters.serviceName }}'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      # DÜZELTME: Aynı temiz değişkeni burada da kullanıyoruz.
      arguments: 'pod/$(safePodName) --ignore-not-found=true'