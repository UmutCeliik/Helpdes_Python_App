# templates/build-service-job.yml
# PodInitializing hatasını çözmek için bekleme adımları düzeltildi.

parameters:
- name: serviceName
  type: string
- name: dependsOn
  type: object
  default: []
- name: condition
  type: string
  default: succeeded()

jobs:
- job: Build_${{ parameters.serviceName }}
  displayName: 'Build Image for ${{ parameters.serviceName }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  
  variables:
    serviceName: ${{ parameters.serviceName }} 
  
  steps:
  # ===================================================================
  # BÖLÜM 1: SCA TARAMA POD'UNU OLUŞTURMA VE ÇALIŞTIRMA
  # ===================================================================
  - task: Bash@3
    name: PrepareScaManifest
    displayName: '1a. Prepare SCA Pod Manifest'
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        echo "Preparing SCA manifest for service: $(serviceName)..."
        if [[ "$(serviceName)" == "frontend" ]]; then
          SCANNER_IMAGE="node:20-alpine"
          SERVICE_TYPE="frontend"
        else
          SCANNER_IMAGE="python:3.11-slim"
          SERVICE_TYPE="backend"
        fi
        
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        scaPodName="sca-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=scaPodName]$scaPodName"

        cp templates/sca-pod-template.yaml "$(kanikoFinalFile)-sca-$(serviceName)"
        
        sed -i "s|__POD_NAME__|$scaPodName|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$(AZP_TOKEN)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$(kanikoFinalFile)-sca-$(serviceName)"

  - task: Kubernetes@1
    displayName: '1b. Apply & Run SCA Pod'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-sca-$(serviceName)'

  # DÜZELTME: 'Follow SCA Pod Logs' adımını ikiye ayırıyoruz.
  - task: Kubernetes@1
    displayName: '1c. Wait for SCA Init Container (git-checkout) to Complete'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'logs'
      # Önce initContainer'ın loglarını takip edip bitmesini bekliyoruz.
      arguments: 'pod/$(scaPodName) --follow --container=git-checkout'

  - task: Kubernetes@1
    displayName: '1d. Follow SCA Main Container (scanner) Logs'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'logs'
      # initContainer bitince, ana konteynerin loglarını takip ediyoruz.
      arguments: 'pod/$(scaPodName) --follow --container=scanner'

  - task: Kubernetes@1
    displayName: '1e. Cleanup SCA Pod'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(scaPodName) --ignore-not-found=true'

  # ===================================================================
  # BÖLÜM 2: KANIKO BUILD POD'UNU OLUŞTURMA VE ÇALIŞTIRMA (SCA başarılıysa)
  # ===================================================================
  - task: Bash@3
    name: PrepareKanikoManifest
    displayName: '2a. Prepare Kaniko Pod Manifest'
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        # Bu adımın içeriği bir önceki çalışan versiyonla aynı.
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        finalPodName="kaniko-build-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=kanikoPodName]$finalPodName"
        #... (sed komutları önceki gibi)
        cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__POD_NAME__|$finalPodName|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$(AZP_TOKEN)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"

  - task: Kubernetes@1
    displayName: '2b. Apply & Run Kaniko Pod'
    # ... (öncekiyle aynı apply adımı)
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-kaniko-$(serviceName)'
      
  - task: Kubernetes@1
    displayName: '2c. Follow Kaniko Pod Logs'
    # ... (öncekiyle aynı logs adımları)
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'logs'
      arguments: 'pod/$(kanikoPodName) --follow --all-containers'

  - task: Kubernetes@1
    displayName: '2d. Cleanup Kaniko Pod'
    # ... (öncekiyle aynı delete adımı)
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(kanikoPodName) --ignore-not-found=true'