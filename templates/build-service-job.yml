# templates/build-service-job.yml
# Token değişkeninin doğru yere (variables) taşındığı son sürüm.

parameters:
- name: serviceName
  type: string
- name: dependsOn
  type: object
  default: []
- name: condition
  type: string
  default: succeeded()

jobs:
- job: Build_${{ parameters.serviceName }}
  displayName: 'Build Image for ${{ parameters.serviceName }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  timeoutInMinutes: 30

  # DÜZELTME: 'env:' bloğu kaldırıldı ve AZP_TOKEN buraya, 'variables' altına taşındı.
  # Bu, AZP_TOKEN'ı bu işin içindeki tüm adımlar için bir ortam değişkeni yapar.
  variables:
    serviceName: ${{ parameters.serviceName }}
    AZP_TOKEN: $(System.AccessToken)

  steps:
  # ===================================================================
  # BÖLÜM 1: SCA TARAMA POD'U
  # ===================================================================
  - task: Bash@3
    name: PrepareScaManifest
    displayName: '1a. Prepare SCA Pod Manifest'
    # Bu görevden 'env:' bloğu kaldırıldı. Script, iş seviyesindeki değişkeni kullanacak.
    inputs:
      targetType: 'inline'
      script: |
        echo "Preparing SCA manifest for service: $(serviceName)..."
        if [[ "$(serviceName)" == "frontend" ]]; then
          SCANNER_IMAGE="node:20-alpine"
          SERVICE_TYPE="frontend"
        else
          SCANNER_IMAGE="python:3.11-slim"
          SERVICE_TYPE="backend"
        fi
        
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        scaPodName="sca-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=scaPodName]$scaPodName"

        cp templates/sca-pod-template.yaml "$(kanikoFinalFile)-sca-$(serviceName)"
        
        # Script, iş seviyesindeki $AZP_TOKEN değişkenini sorunsuzca kullanabilir.
        sed -i "s|__POD_NAME__|$scaPodName|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$(kanikoFinalFile)-sca-$(serviceName)"

  # ... (Diğer tüm apply, wait, cleanup adımları aynı kalır) ...
  # Not: Bu adımların içeriği bir önceki çalışan versiyondaki gibi korunmalıdır.
  # Sadece bu dosyanın tam ve çalışır halini istendiği için tekrar eklenmiştir.
  - task: Kubernetes@1
    displayName: '1b. Apply & Run SCA Pod'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-sca-$(serviceName)'

  - task: Bash@3
    displayName: '1c. Wait for SCA Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(scaPodName) to finish initializing..."
        while true; do
          STATUS_CHECK=$(kubectl get pod $(scaPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="scanner")].state}')
          if [[ -n "$STATUS_CHECK" ]] && [[ ! "$STATUS_CHECK" =~ "waiting" ]]; then
            echo "Container 'scanner' has started or completed. Proceeding to get logs."
            break
          fi
          echo "Pod is still initializing..."
          sleep 5
        done
        echo "Getting logs from completed container..."
        kubectl logs $(scaPodName) -n $(k8sNamespace) -c scanner --tail=-1
        FINAL_PHASE=$(kubectl get pod $(scaPodName) -n $(k8sNamespace) -o jsonpath='{.status.phase}')
        if [ "$FINAL_PHASE" != "Succeeded" ]; then
            echo "SCA Pod did not succeed. Final phase: $FINAL_PHASE"
            exit 1
        fi
        echo "SCA Pod completed successfully. Phase: $FINAL_PHASE"

  - task: Kubernetes@1
    displayName: '1d. Cleanup SCA Pod'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(scaPodName) --ignore-not-found=true'

  # ===================================================================
  # BÖLÜM 2: KANIKO BUILD POD'U
  # ===================================================================
  - task: Bash@3
    name: PrepareKanikoManifest
    displayName: '2a. Prepare Kaniko Pod Manifest'
    inputs:
      targetType: 'inline'
      script: |
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        kanikoPodName="kaniko-build-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=kanikoPodName]$kanikoPodName"
        cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__POD_NAME__|$kanikoPodName|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"

  - task: Kubernetes@1
    displayName: '2b. Apply & Run Kaniko Pod'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-kaniko-$(serviceName)'

  - task: Bash@3
    displayName: '2c. Wait for Kaniko Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(kanikoPodName) to finish initializing..."
        while true; do
          STATUS_CHECK=$(kubectl get pod $(kanikoPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="kaniko")].state}')
          if [[ -n "$STATUS_CHECK" ]] && [[ ! "$STATUS_CHECK" =~ "waiting" ]]; then
            echo "Container 'kaniko' has started. Following logs."
            kubectl logs $(kanikoPodName) -n $(k8sNamespace) -c kaniko --follow
            break
          fi
          echo "Kaniko pod is still initializing..."
          sleep 5
        done
        FINAL_PHASE=$(kubectl get pod $(kanikoPodName) -n $(k8sNamespace) -o jsonpath='{.status.phase}')
        if [ "$FINAL_PHASE" != "Succeeded" ]; then
            echo "Kaniko Pod did not succeed. Final phase: $FINAL_PHASE"
            exit 1
        fi
        echo "Kaniko Pod completed successfully. Phase: $FINAL_PHASE"

  - task: Kubernetes@1
    displayName: '2d. Cleanup Kaniko Pod'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(kanikoPodName) --ignore-not-found=true'