# templates/build-service-job.yml (GÜNCELLENMİŞ)
# Bu şablon, bir servis için tüm CI adımlarını (SonarQube, Nexus Publish, SBOM) yönetir.
# Artık Git dalına göre dinamik sürümleme ve Nexus depo seçimi yapar.

parameters:
- name: serviceName
  type: string
- name: sonarProjectKey
  type: string
- name: dependsOn
  type: object
  default: []
- name: condition
  type: string
  default: succeeded()

jobs:
- job: Build_${{ parameters.serviceName }}
  displayName: 'Scan & Build for ${{ parameters.serviceName }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  timeoutInMinutes: 45

  variables:
  - group: Nexus-Credentials # Library'den NEXUS_USERNAME ve NEXUS_PASSWORD değişkenlerini alır
  - group: SonarQube-Variables # Library'den SONAR_URL ve SONAR_TOKEN değişkenlerini alır
  - name: serviceName
    value: ${{ parameters.serviceName }}
  - name: sonarProjectKey
    value: ${{ parameters.sonarProjectKey }}
  - name: gitRepoUrl
    value: 'https://dev.azure.com/umutcelik0234/HelpDesk_App/_git/helpdesk-app-src'
  - name: kanikoFinalFile
    value: '$(Build.ArtifactStagingDirectory)/kaniko-pod-final'
  - name: NEXUS_INTERNAL_URL
    value: 'http://nexus-repository-manager.nexus:8081' # Pod içinden erişim için
  - name: NEXUS_HOST
    value: 'nexus-repository-manager.nexus' # --trusted-host için
    
  steps:
  - checkout: self
    persistCredentials: true

  # ===================================================================
  # BÖLÜM 1: SCA TARAMA POD'U (Yorumlu bırakıldı)
  # ===================================================================
  - task: Bash@3
    name: PrepareScaManifest
    displayName: '1a. Prepare SCA Pod Manifest'
    env:
      AZP_TOKEN: $(System.AccessToken)
      NEXUS_USER: $(NexusUsername)
      NEXUS_PASS: $(NexusPassword)
    inputs:
      targetType: 'inline'
      script: |
        set -ex # Hata durumunda çık
        echo "Preparing SCA manifest for service: $(serviceName)..."
        
        if [[ "$(serviceName)" == "frontend" ]]; then 
          SCANNER_IMAGE="node:20-slim"; SERVICE_TYPE="frontend"; 
        else 
          SCANNER_IMAGE="python:3.11-slim"; SERVICE_TYPE="backend"; 
        fi
        
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        scaPodName="sca-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=scaPodName]$scaPodName"
        
        finalScaManifest="$(kanikoFinalFile)-sca-$(serviceName)"
        cp templates/sca-pod-template.yaml "$finalScaManifest"

        # --- YENİ EKLENEN NEXUS DEĞİŞKENLERİ ---
        # Nexus URL'ini kullanıcı adı ve şifre ile birleştiriyoruz.
        NEXUS_URL_WITH_CREDS=$(echo "$(NEXUS_INTERNAL_URL)/repository/helpdesk-pypi-all/simple/" | sed "s,http://,http://$NEXUS_USER:$NEXUS_PASS@,")
        
        # Standart değişkenleri dolduruyoruz
        sed -i "s|__POD_NAME__|$scaPodName|g" "$finalScaManifest"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$finalScaManifest"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$finalScaManifest"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$finalScaManifest"
        sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$finalScaManifest"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$finalScaManifest"

        # --- YENİ EKLENEN NEXUS 'sed' KOMUTLARI ---
        # Yeni eklediğimiz Nexus alanlarını şablonda dolduruyoruz.
        sed -i "s|__NEXUS_URL_WITH_CREDS__|$NEXUS_URL_WITH_CREDS|g" "$finalScaManifest"
        sed -i "s|__NEXUS_HOST__|$(NEXUS_HOST)|g" "$finalScaManifest"

        echo "--- Generated SCA Pod Manifest (with Nexus config) ---"
        cat "$finalScaManifest"

  - task: Kubernetes@1
    displayName: '1b. Apply & Run SCA Pod'
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-sca-$(serviceName)' }

  - task: Bash@3
    displayName: '1c. Wait for SCA Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(scaPodName) to finish..."; kubectl wait --for=condition=Ready pod/$(scaPodName) --timeout=5m -n $(k8sNamespace); kubectl logs $(scaPodName) -n $(k8sNamespace) -c scanner --follow
        
  - task: Kubernetes@1
    displayName: '1d. Cleanup SCA Pod'
    condition: always()
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(scaPodName) --ignore-not-found=true' }

  # ===================================================================
  # BÖLÜM 2: SONARQUBE TARAMA POD'U (Değişiklik yok, aynı kalıyor)
  # ===================================================================
  - task: Bash@3
    name: PrepareSonarManifest
    displayName: '2a. Prepare SonarQube Pod Manifest'
    env:
      AZP_TOKEN_FROM_PIPELINE: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        echo "Preparing SonarQube manifest for service: $(serviceName)..."
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g'); sonarPodName="sonar-$(Build.BuildId)-$safePodSuffix"; echo "##vso[task.setvariable variable=sonarPodName]$sonarPodName"
        cp templates/sonar-pod-template.yaml "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__POD_NAME__|$sonarPodName|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN_FROM_PIPELINE|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__SONAR_URL__|$(SONAR_URL)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__SONAR_TOKEN__|$(SONAR_TOKEN)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"
        sed -i "s|__PROJECT_KEY__|$(sonarProjectKey)|g" "$(kanikoFinalFile)-sonar-$(serviceName)"

  - task: Kubernetes@1
    displayName: '2b. Apply & Run SonarQube Pod'
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-sonar-$(serviceName)' }

  - task: Bash@3
    name: SonarStatusCheck
    displayName: '2c. Wait for SonarQube Pod & Check Quality Gate'
    inputs:
      targetType: 'inline'
      script: |
        set -x
        echo "Waiting for pod $(sonarPodName) to finish...";
        kubectl wait --for=condition=Ready pod/$(sonarPodName) --timeout=3m -n $(k8sNamespace);
        kubectl logs $(sonarPodName) -n $(k8sNamespace) -c sonarqube-scanner --follow
        
        # Quality Gate kontrolü
        CURL_URL="$(SONAR_URL)/api/qualitygates/project_status?projectKey=$(sonarProjectKey)"
        CURL_HEADER_AUTH="-u $(SONAR_TOKEN):"
        SONAR_STATUS=$(curl -s --insecure $CURL_HEADER_AUTH "$CURL_URL" | jq -r .projectStatus.status)

        echo "Final SonarQube Quality Gate Status: $SONAR_STATUS"
        if [ "$SONAR_STATUS" != "OK" ]; then
            echo "##vso[task.logissue type=error;]SonarQube Quality Gate failed."
            echo "##vso[task.setvariable variable=sonar_status]FAILED"
            exit 1
        else
            echo "##vso[task.setvariable variable=sonar_status]OK"
        fi

  - task: Kubernetes@1
    displayName: '2d. Cleanup SonarQube Pod'
    condition: always()
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(sonarPodName) --ignore-not-found=true' }

  # ===================================================================
  # BÖLÜM 3: PYTHON ARTIFACT'LARINI NEXUS'A YAYINLAMA
  # ===================================================================
  - task: Bash@3
    name: PrepareUniversalNexusPublisher
    displayName: '3a. Prepare Universal Nexus Publisher Manifest'
    # Condition artık frontend'i de kapsayacak şekilde güncellendi.
    condition: and(succeeded(), in(variables['serviceName'], 'user_service', 'ticket_service', 'frontend'), eq(variables['sonar_status'], 'OK'))
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        set -ex
        
        # 1. Ortak değişkenleri hazırla
        safePodSuffix=$(echo "${{ parameters.serviceName }}" | sed 's/_/-/g')
        nexusPublisherPodName="nexus-publisher-$(Build.BuildId)-$safePodSuffix"
        echo "##vso[task.setvariable variable=nexusPublisherPodName]$nexusPublisherPodName"
        finalManifestFile="$(kanikoFinalFile)-nexus-publisher-${{ parameters.serviceName }}"
        cp templates/nexus-publisher-pod-template.yaml "$finalManifestFile" # Güncellenmiş şablonu kopyala

        # 2. Servis tipine göre değişkenleri ayarla
        if [[ "${{ parameters.serviceName }}" == "frontend" ]]; then
          SERVICE_TYPE="frontend"
          NPM_GROUP_URL="$(NEXUS_INTERNAL_URL)/repository/npm-group/"
          FRONTEND_ARTIFACT_REPO_URL="$(NEXUS_INTERNAL_URL)/repository/helpdesk-frontend-artifacts" # Nexus'ta oluşturduğunuz raw repo
          # Python'a özel değişkenleri boş geç
          PACKAGE_VERSION=""
          TARGET_REPO_URL=""
          PYPI_GROUP_URL=""
        else
          SERVICE_TYPE="backend"
          # Frontend'e özel değişkenleri boş geç
          NPM_GROUP_URL=""
          FRONTEND_ARTIFACT_REPO_URL=""
          
          # Mevcut Python versiyonlama mantığı
          BASE_VERSION=$(grep -oP "version=['\"]\K[^'\"]+" "$(Build.SourcesDirectory)/${{ parameters.serviceName }}/setup.py")
          if [[ "$(Build.SourceBranch)" == "refs/heads/main" ]]; then
            TARGET_REPO_URL="$(NEXUS_INTERNAL_URL)/repository/helpdesk-python-releases/"
            PACKAGE_VERSION="$BASE_VERSION"
          else
            TARGET_REPO_URL="$(NEXUS_INTERNAL_URL)/repository/helpdesk-python-snapshots/"
            DEV_VERSION_SUFFIX=".dev$(date +%Y%m%d)$(Build.BuildId)"
            PACKAGE_VERSION="$BASE_VERSION$DEV_VERSION_SUFFIX"
          fi
          PYPI_GROUP_URL=$(echo "$(NEXUS_INTERNAL_URL)/repository/helpdesk-pypi-all/simple/" | sed "s,http://,http://$(NexusUsername):$(NexusPassword)@,")
        fi

        # 3. Tüm placeholder'ları doldur
        GIT_REPO_URL_WITH_TOKEN=$(echo "$(gitRepoUrl)" | sed "s,https://,https://$(System.AccessToken)@,")

        sed -i "s|__POD_NAME__|$nexusPublisherPodName|g" "$finalManifestFile"
        sed -i "s|__GIT_REPO_URL_WITH_TOKEN__|$GIT_REPO_URL_WITH_TOKEN|g" "$finalManifestFile"
        sed -i "s|__CONTEXT_SUB_PATH_RELATIVE__|${{ parameters.serviceName }}|g" "$finalManifestFile"
        sed -i "s|__NEXUS_USERNAME__|$(NexusUsername)|g" "$finalManifestFile"
        sed -i "s|__NEXUS_PASSWORD__|$(NexusPassword)|g" "$finalManifestFile"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$finalManifestFile"
        sed -i "s|__BUILD_ID__|$(Build.BuildId)|g" "$finalManifestFile"
        sed -i "s|__GIT_REPO_URL__|$(gitRepoUrl)|g" "$finalManifestFile"
        sed -i "s|__AZP_TOKEN__|$(System.AccessToken)|g" "$finalManifestFile"
        # Değişkenlerin boş olabileceğini hesaba katarak sed komutlarını güvenli hale getirelim
        sed -i "s|__PACKAGE_VERSION__|$PACKAGE_VERSION|g" "$finalManifestFile"
        sed -i "s|__TARGET_REPO_URL__|$TARGET_REPO_URL|g" "$finalManifestFile"
        sed -i "s|__PYPI_GROUP_URL__|$PYPI_GROUP_URL|g" "$finalManifestFile"
        sed -i "s|__NPM_GROUP_URL__|$NPM_GROUP_URL|g" "$finalManifestFile"
        sed -i "s|__FRONTEND_ARTIFACT_REPO_URL__|$FRONTEND_ARTIFACT_REPO_URL|g" "$finalManifestFile"

        echo "--- Generated Universal Nexus Publisher Pod Manifest ---"
        cat "$finalManifestFile"

  # Geri kalan "Apply & Run" ve "Cleanup" adımları aynı kalabilir, sadece condition'ı güncellemeniz yeterli.
  - task: Kubernetes@1
    displayName: '3b. Apply & Run Universal Nexus Publisher Pod'
    condition: and(succeeded(), in(variables['serviceName'], 'user_service', 'ticket_service', 'frontend'), eq(variables['sonar_status'], 'OK'))
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-nexus-publisher-${{ parameters.serviceName }}'

  - task: Bash@3
    displayName: '3c. Wait for Nexus Publisher Pod & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        set -ex
        
        # "publisher" konteynerinin Terminated olmasını bekle (başarılı veya hatalı bitebilir)
        # Eğer konteyner 3 dakika içinde Terminated olmazsa, bu komut zaman aşımına uğrar.
        kubectl wait --for=jsonpath='{.status.containerStatuses[?(@.name=="publisher")].state.terminated}' \
          pod/$(nexusPublisherPodName) --timeout=3m -n $(k8sNamespace) || true
        
        echo "Publisher container (possibly) terminated. Getting logs and checking exit code..."
        
        # Sadece publisher konteynerinin loglarını çek
        POD_LOGS=$(kubectl logs $(nexusPublisherPodName) -n $(k8sNamespace) -c publisher)
        echo "$POD_LOGS" # Logları pipeline çıktısına yazdır
        
        # "publisher" konteynerinin çıkış kodunu kontrol et
        EXIT_CODE=$(kubectl get pod $(nexusPublisherPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="publisher")].state.terminated.exitCode}')
        POD_STATUS=$(kubectl get pod $(nexusPublisherPodName) -n $(k8sNamespace) -o jsonpath='{.status.phase}')

        echo "Pod final status: $POD_STATUS"
        echo "Publisher container exit code: ${EXIT_CODE:-N/A}"

        if [ "$POD_STATUS" == "Failed" ]; then
            echo "##vso[task.logissue type=error;]Nexus Publisher Pod failed. Check logs for details."
            exit 1
        elif [ "$EXIT_CODE" -ne 0 ]; then
            echo "##vso[task.logissue type=error;]Nexus Publisher Pod (publisher container) failed with exit code: $EXIT_CODE"
            exit 1
        # Twine'ın hata mesajını loglarda ara
        elif echo "$POD_LOGS" | grep -qi "error.*repository does not allow updating assets\|http.*bad request\|error during upload"; then
          echo "##vso[task.logissue type=error;]Nexus Publisher Pod failed: Twine upload error detected in logs."
          exit 1
        else
            echo "Nexus Publisher Pod completed successfully."
        fi
    condition: and(succeeded(), in(variables['serviceName'], 'user_service', 'ticket_service', 'frontend'), eq(variables['sonar_status'], 'OK'))

  - task: Kubernetes@1
    displayName: '3d. Cleanup Nexus Publisher Pod'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(nexusPublisherPodName) --ignore-not-found=true'

  # ===================================================================
  # BÖLÜM 4: KANIKO BUILD POD'U
  # ===================================================================
  - task: Bash@3
    name: PrepareKanikoManifest
    displayName: '4a. Prepare Kaniko Manifest'
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g'); kanikoPodName="kaniko-build-$(imageTag)-$safePodSuffix"; echo "##vso[task.setvariable variable=kanikoPodName]$kanikoPodName"
        cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__POD_NAME__|$kanikoPodName|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"; sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"

  - task: Kubernetes@1
    displayName: '4b. Apply & Run Kaniko Pod'
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-kaniko-$(serviceName)' }

  - task: Bash@3
    displayName: '4c. Wait for Kaniko Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(kanikoPodName) to start..."; kubectl wait --for=condition=Ready pod/$(kanikoPodName) --timeout=15m -n $(k8sNamespace); kubectl logs $(kanikoPodName) -n $(k8sNamespace) -c kaniko --follow

  - task: Kubernetes@1
    displayName: '4d. Cleanup Kaniko Pod'
    condition: always()
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(kanikoPodName) --ignore-not-found=true' }
  
  

  # ===================================================================
  # BÖLÜM 5: SBOM Üretimi ve Nexus'a Yükleme (Güncellenmiş)
  # ===================================================================
  - task: Bash@3
    name: PrepareSbomGeneratorManifest
    displayName: '5a. Prepare SBOM Generator Pod Manifest'
    condition: succeeded()
    env:
      AZP_TOKEN: $(System.AccessToken)
      NEXUS_USERNAME: $(NexusUsername)
      NEXUS_PASSWORD: $(NexusPassword)
    inputs:
      targetType: 'inline'
      script: |
        set -ex
        echo "Preparing SBOM Generator manifest for service: ${{ parameters.serviceName }}..."
        
        # Servis tipine göre imaj ve değişkenleri ayarla
        if [[ "${{ parameters.serviceName }}" == "frontend" ]]; then
          SCANNER_IMAGE="node:20-slim"
          SERVICE_TYPE="frontend"
          NPM_GROUP_URL="$(NEXUS_INTERNAL_URL)/repository/npm-group/"
          PYPI_GROUP_URL="" # Boş bırak
        else
          SCANNER_IMAGE="python:3.11-slim"
          SERVICE_TYPE="backend"
          NPM_GROUP_URL="" # Boş bırak
          PYPI_GROUP_URL=$(echo "$(NEXUS_INTERNAL_URL)/repository/helpdesk-pypi-all/simple/" | sed "s,http://,http://$(NexusUsername):$(NexusPassword)@,")
        fi

        # Pod adını ve dosya yolunu hazırla
        safePodSuffix=$(echo "${{ parameters.serviceName }}" | sed 's/_/-/g')
        sbomPodName="sbom-$(Build.BuildId)-$safePodSuffix"
        echo "##vso[task.setvariable variable=sbomPodName]$sbomPodName"
        
        finalSbomManifest="$(kanikoFinalFile)-sbom-${{ parameters.serviceName }}"
        cp templates/sbom-generator-pod-template.yaml "$finalSbomManifest"
        
        # Placeholder'ları doldur
        sed -i "s|__POD_NAME__|$sbomPodName|g" "$finalSbomManifest"
        sed -i "s|__GIT_REPO_URL__|$(gitRepoUrl)|g" "$finalSbomManifest"
        sed -i "s|__AZP_TOKEN__|$(System.AccessToken)|g" "$finalSbomManifest"
        sed -i "s|__CONTEXT_SUB_PATH_RELATIVE__|${{ parameters.serviceName }}|g" "$finalSbomManifest"
        sed -i "s|__NEXUS_USERNAME__|$(NexusUsername)|g" "$finalSbomManifest"
        sed -i "s|__NEXUS_PASSWORD__|$(NexusPassword)|g" "$finalSbomManifest"
        sed -i "s|__SERVICE_NAME__|${{ parameters.serviceName }}|g" "$finalSbomManifest"
        # Yeni eklenen dinamik değişkenler
        sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$finalSbomManifest"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$finalSbomManifest"
        sed -i "s|__NPM_GROUP_URL__|$NPM_GROUP_URL|g" "$finalSbomManifest"
        sed -i "s|__PYPI_GROUP_URL__|$PYPI_GROUP_URL|g" "$finalSbomManifest"
        sed -i "s|__NEXUS_HOST__|$(NEXUS_HOST)|g" "$finalSbomManifest"

        echo "--- Generated SBOM Pod Manifest ---"
        cat "$finalSbomManifest"

  - task: Kubernetes@1
    displayName: '5b. Apply & Run SBOM Generator Pod'
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'apply', arguments: '-f $(kanikoFinalFile)-sbom-${{ parameters.serviceName }}' }
    condition: succeeded()

  - task: Bash@3
    name: WaitAndGetSbomLogs
    displayName: '5c. Wait for SBOM Generator Pod & Get Logs'
    condition: succeeded()
    inputs:
      targetType: 'inline'
      script: |
        # Hata durumunda script'i anında durdur ve komutları logla
        set -ex

        # 1. Pod'un başarıyla tamamlanmasını bekle
        # 'ContainersReady' yerine, pod'un 'Succeeded' aşamasına gelmesini bekliyoruz.
        # Bu, kısa süreli işler için doğru bekleme yöntemidir.
        echo "Waiting for pod $(sbomPodName) to complete..."
        if ! kubectl wait pod/$(sbomPodName) \
          --for=jsonpath='{.status.phase}'=Succeeded \
          --timeout=3m \
          -n $(k8sNamespace); then
          
          echo "##[error]Pod $(sbomPodName) did not succeed within the timeout."
          echo "--- Final Pod Status ---"
          kubectl get pod $(sbomPodName) -n $(k8sNamespace) -o wide
          echo "--- Pod Description ---"
          kubectl describe pod $(sbomPodName) -n $(k8sNamespace)
          echo "--- All Container Logs ---"
          kubectl logs $(sbomPodName) -n $(k8sNamespace) --all-containers --tail=100
          exit 1
        fi
        
        # 2. Pod başarıyla tamamlandıysa logları al
        echo "Pod completed successfully. Fetching logs for verification..."
        
        echo "--- Generator Container Logs ---"
        kubectl logs $(sbomPodName) -n $(k8sNamespace) -c generator
        
        echo "--- Uploader Container Logs ---"
        kubectl logs $(sbomPodName) -n $(k8sNamespace) -c uploader
        
        # 3. Son bir doğrulama yap (İsteğe bağlı ama önerilir)
        UPLOADER_EXIT_CODE=$(kubectl get pod $(sbomPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="uploader")].state.terminated.exitCode}')
        
        if [ "$UPLOADER_EXIT_CODE" -ne 0 ]; then
          echo "##[error]Uploader container failed with a non-zero exit code: $UPLOADER_EXIT_CODE"
          exit 1
        fi

        echo "SBOM Generation and Upload process successfully verified."

  - task: Kubernetes@1
    displayName: '5d. Cleanup SBOM Generator Pod'
    inputs: { connectionType: 'None', namespace: '$(k8sNamespace)', command: 'delete', arguments: 'pod/$(sbomPodName) --ignore-not-found=true' }
    condition: always()


  # - task: Bash@3
  #   displayName: 'Update Redmine Issue'
  #   condition: succeeded()
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       ISSUE_ID=$(git log -1 --pretty=%B | grep -o '#[0-9]*' | sed 's/#//'); if [ -z "$ISSUE_ID" ]; then echo "Commit mesajında Redmine issue ID'si bulunamadı."; exit 0; fi; echo "Redmine Issue #$ISSUE_ID güncelleniyor..."; STATUS_ID_IN_PROGRESS=2; JSON_PAYLOAD=$(cat <<EOF
  #       { "issue": { "notes": "CI pipeline, $(serviceName) servisi için başarıyla tamamlandı. Build: $(Build.BuildId). Link: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)", "status_id": $STATUS_ID_IN_PROGRESS } }
  #       EOF
  #       ); HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Content-Type: application/json" -H "X-Redmine-API-Key: $(REDMINE_API_KEY)" -d "$JSON_PAYLOAD" "$(REDMINE_URL)/issues/$ISSUE_ID.json"); if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then echo "Redmine Issue #$ISSUE_ID başarıyla güncellendi. (HTTP Status: $HTTP_STATUS)"; else echo "##vso[task.logissue type=error]Redmine Issue güncellenirken hata oluştu. HTTP Status: $HTTP_STATUS"; exit 1; fi