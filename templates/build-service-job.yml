# templates/build-service-job.yml
# Token değişkeninin doğru yere (variables) taşındığı son sürüm.

parameters:
- name: serviceName
  type: string
- name: dependsOn
  type: object
  default: []
- name: condition
  type: string
  default: succeeded()

jobs:
- job: Build_${{ parameters.serviceName }}
  displayName: 'Build Image for ${{ parameters.serviceName }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  timeoutInMinutes: 10

  # DÜZELTME: 'env:' bloğu kaldırıldı ve AZP_TOKEN buraya, 'variables' altına taşındı.
  # Bu, AZP_TOKEN'ı bu işin içindeki tüm adımlar için bir ortam değişkeni yapar.
  variables:
    serviceName: ${{ parameters.serviceName }}

  steps:
  # ===================================================================
  # BÖLÜM 1: SCA TARAMA POD'U
  # ===================================================================
  - task: Bash@3
    name: PrepareScaManifest
    displayName: '1a. Prepare SCA Pod Manifest'
    env:
      AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        echo "Preparing SCA manifest for service: $(serviceName)..."
        if [[ "$(serviceName)" == "frontend" ]]; then
          SCANNER_IMAGE="node:20-slim"
          SERVICE_TYPE="frontend"
        else
          SCANNER_IMAGE="python:3.11-slim"
          SERVICE_TYPE="backend"
        fi
        
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        scaPodName="sca-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=scaPodName]$scaPodName"

        cp templates/sca-pod-template.yaml "$(kanikoFinalFile)-sca-$(serviceName)"
        
        sed -i "s|__POD_NAME__|$scaPodName|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SCANNER_IMAGE__|$SCANNER_IMAGE|g" "$(kanikoFinalFile)-sca-$(serviceName)"
        sed -i "s|__SERVICE_TYPE__|$SERVICE_TYPE|g" "$(kanikoFinalFile)-sca-$(serviceName)"

  # ... (Diğer tüm apply, wait, cleanup adımları aynı kalır) ...
  # Not: Bu adımların içeriği bir önceki çalışan versiyondaki gibi korunmalıdır.
  # Sadece bu dosyanın tam ve çalışır halini istendiği için tekrar eklenmiştir.
  - task: Kubernetes@1
    displayName: '1b. Apply & Run SCA Pod'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-sca-$(serviceName)'

  - task: Bash@3
    displayName: '1c. Wait for SCA Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(scaPodName) to finish initializing..."
        while true; do
          STATUS_CHECK=$(kubectl get pod $(scaPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="scanner")].state}' 2>/dev/null)
          if [[ -n "$STATUS_CHECK" ]] && [[ ! "$STATUS_CHECK" =~ "waiting" ]]; then
            echo "Container 'scanner' has started. Attaching to log stream..."
            break
          fi
          PHASE_CHECK=$(kubectl get pod $(scaPodName) -n $(k8sNamespace) -o jsonpath='{.status.phase}' 2>/dev/null)
          if [[ "$PHASE_CHECK" == "Failed" ]] || [[ "$PHASE_CHECK" == "Succeeded" ]]; then
             echo "Pod has already terminated with phase: $PHASE_CHECK. Getting final logs."
             break
          fi
          echo "Pod is still initializing..."
          sleep 5
        done
        kubectl logs $(scaPodName) -n $(k8sNamespace) -c scanner --follow

  - task: Kubernetes@1
    displayName: '1d. Cleanup SCA Pod'
    condition: always()
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'delete'
      arguments: 'pod/$(scaPodName) --ignore-not-found=true'

  # ===================================================================
  # BÖLÜM 2: KANIKO BUILD POD'U
  # ===================================================================
  - task: Bash@3
    name: PrepareKanikoManifest
    displayName: '2a. Prepare Kaniko Pod Manifest'
    env:
          AZP_TOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        safePodSuffix=$(echo "$(serviceName)" | sed 's/_/-/g')
        kanikoPodName="kaniko-build-$(imageTag)-$safePodSuffix"
        echo "##vso[task.setvariable variable=kanikoPodName]$kanikoPodName"
        cp "$(kanikoTemplateFile)" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__POD_NAME__|$kanikoPodName|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT__|$(gitRepoUrl)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__CONTEXT_SUB_PATH__|$(serviceName)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__DESTINATION_TAG__|$(harborRepo)/$(serviceName):$(imageTag)|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"
        sed -i "s|__AZP_TOKEN__|$AZP_TOKEN|g" "$(kanikoFinalFile)-kaniko-$(serviceName)"

  - task: Kubernetes@1
    displayName: '2b. Apply & Run Kaniko Pod'
    inputs:
      connectionType: 'None'
      namespace: '$(k8sNamespace)'
      command: 'apply'
      arguments: '-f $(kanikoFinalFile)-kaniko-$(serviceName)'

  - task: Bash@3
    displayName: '2c. Wait for Kaniko Pod to Complete & Get Logs'
    inputs:
      targetType: 'inline'
      script: |
        echo "Waiting for pod $(kanikoPodName) to start..."
        while true; do
          STATUS_CHECK=$(kubectl get pod $(kanikoPodName) -n $(k8sNamespace) -o jsonpath='{.status.containerStatuses[?(@.name=="kaniko")].state}' 2>/dev/null)
          if [[ -n "$STATUS_CHECK" ]] && [[ ! "$STATUS_CHECK" =~ "waiting" ]]; then
            echo "Container 'kaniko' has started. Attaching to log stream..."
            break
          fi
          PHASE_CHECK=$(kubectl get pod $(kanikoPodName) -n $(k8sNamespace) -o jsonpath='{.status.phase}' 2>/dev/null)
          if [[ "$PHASE_CHECK" == "Failed" ]] || [[ "$PHASE_CHECK" == "Succeeded" ]]; then
             echo "Pod has already terminated with phase: $PHASE_CHECK. Getting final logs."
             break
          fi
          echo "Kaniko pod is still initializing..."
          sleep 5
        done
        
        kubectl logs $(kanikoPodName) -n $(k8sNamespace) -c kaniko --follow

  # - task: Kubernetes@1
  #   displayName: '2d. Cleanup Kaniko Pod'
  #   condition: always()
  #   inputs:
  #     connectionType: 'None'
  #     namespace: '$(k8sNamespace)'
  #     command: 'delete'
  #     arguments: 'pod/$(kanikoPodName) --ignore-not-found=true'

  - task: Bash@3
    displayName: 'Update Redmine Issue'
    condition: succeeded() # Sadece önceki adımlar başarılı olursa çalış
    inputs:
      targetType: 'inline'
      script: |
        # Commit mesajından Redmine issue numarasını bul (örn: "fixes #123")
        ISSUE_ID=$(git log -1 --pretty=%B | grep -o '#[0-9]*' | sed 's/#//')

        if [ -z "$ISSUE_ID" ]; then
          echo "Commit mesajında Redmine issue ID'si bulunamadı. (Örn: fixes #123)"
          exit 0 # Hata vermeden çık, çünkü her commit bir işe bağlı olmayabilir.
        fi

        echo "Redmine Issue #$ISSUE_ID güncelleniyor..."

        # Redmine'deki "In Progress" durumunun ID'sini buraya yazın.
        STATUS_ID_IN_PROGRESS=2 

        JSON_PAYLOAD=$(cat <<EOF
        {
          "issue": {
            "notes": "CI pipeline, $(serviceName) servisi için başarıyla tamamlandı. Build: $(Build.BuildId). Link: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)",
            "status_id": $STATUS_ID_IN_PROGRESS
          }
        }
        EOF
        )

        # curl ile Redmine API'sine PUT isteği gönder
        # -s (silent), -f (fail silently on server errors), -w (write-out) flag'leri eklendi.
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -X PUT \
          -H "Content-Type: application/json" \
          -H "X-Redmine-API-Key: $(REDMINE_API_KEY)" \
          -d "$JSON_PAYLOAD" \
          "$(REDMINE_URL)/issues/$ISSUE_ID.json")
        
        if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "Redmine Issue #$ISSUE_ID başarıyla güncellendi. (HTTP Status: $HTTP_STATUS)"
        else
            echo "##vso[task.logissue type=error]Redmine Issue güncellenirken hata oluştu. HTTP Status: $HTTP_STATUS"
            exit 1
        fi