# templates/nexus-publisher-pod-template.yaml (GÜNCELLENMİŞ - Daha Sağlam)
# Bu şablon, bir Python paketini derler (wheel/sdist) ve hedeflenen Nexus deposuna (snapshot veya release) yayınlar.
apiVersion: v1
kind: Pod
metadata:
  name: __POD_NAME__
  namespace: ado-agents
  labels:
    app: nexus-publisher
spec:
  restartPolicy: Never
  serviceAccountName: ado-agent-sa
  
  initContainers:
  # 1. Init Container: Git deposunu klonlar (Basitleştirilmiş)
  - name: git-cloner
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      set -ex # Hata durumunda çık ve komutları logla
      echo "Cloning repository..."
      # Doğrudan, pipeline tarafından hazırlanan ortam değişkenini kullanıyoruz.
      git clone "$GIT_REPO_URL_WITH_TOKEN" /workspace/source
      echo "Source code cloned successfully."
    env:
    # Bu değişken, build-service-job.yml'de dinamik olarak doldurulur.
    - name: GIT_REPO_URL_WITH_TOKEN
      value: __GIT_REPO_URL_WITH_TOKEN__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace

  # 2. Ana Container: Paketi derler ve yayınlar (Değişiklik yok)
  containers:
  - name: publisher
    image: umut98/nexus-publisher:latest
    env:
    - name: NEXUS_USERNAME
      value: __NEXUS_USERNAME__
    - name: NEXUS_PASSWORD
      value: __NEXUS_PASSWORD__
    - name: CONTEXT_SUB_PATH_RELATIVE
      value: __CONTEXT_SUB_PATH_RELATIVE__
    - name: PACKAGE_VERSION
      value: __PACKAGE_VERSION__
    - name: TARGET_REPO_URL
      value: __TARGET_REPO_URL__
    - name: PYPI_GROUP_URL
      value: __PYPI_GROUP_URL__
    - name: NEXUS_HOST
      value: __NEXUS_HOST__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace
    command: ["/bin/bash", "-c"]
    args:
    - |
      set -ex
      cd "/workspace/source/$CONTEXT_SUB_PATH_RELATIVE/"
      echo "--- Current Directory: $(pwd) ---"
      echo "Updating version in setup.py to '$PACKAGE_VERSION'"
      sed -i "s/version=['\"].*['\"]/version='$PACKAGE_VERSION'/" setup.py
      echo "--- Installing build tools ---"
      pip install --no-cache-dir --index-url "$PYPI_GROUP_URL" --trusted-host "$NEXUS_HOST" wheel twine
      echo "--- Building the package ---"
      python setup.py sdist bdist_wheel
      echo "--- Publishing to Nexus ---"
      TWINE_USERNAME="$NEXUS_USERNAME" TWINE_PASSWORD="$NEXUS_PASSWORD" twine upload --repository-url "$TARGET_REPO_URL" dist/*
      echo "Artifacts published successfully."
  volumes:
  - name: work-volume
    emptyDir: {}
