apiVersion: v1
kind: Pod
metadata:
  name: __POD_NAME__
  namespace: ado-agents
  labels:
    app: nexus-publisher
spec:
  restartPolicy: Never
  serviceAccountName: ado-agent-sa
  
  initContainers:
  - name: git-cloner
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      set -ex
      rm -rf /workspace/source && mkdir -p /workspace/source
      
      echo "Cloning repository into /workspace/source..."
      # Not: gitRepoUrl değişkeni azure-pipelines.yml'den geliyor
      GIT_REPO_URL_WITH_TOKEN=$(echo "$GIT_REPO_URL" | sed "s,https://,https://$AZP_TOKEN@,")
      git clone --depth 1 "$GIT_REPO_URL_WITH_TOKEN" /workspace/source
      echo "Source code cloned successfully."

      # --- DEBUG İÇİN EKLENEN BÖLÜM ---
      echo "--- Listing cloned files for debugging ---"
      ls -laR /workspace # <--- Bu komut size gerçeği söylemeli
      echo "--- Debug listing complete ---"
      # --- DEBUG BÖLÜMÜ SONU ---

    env:
    - name: GIT_REPO_URL
      value: "__GIT_REPO_URL__"
    - name: AZP_TOKEN
      value: "__AZP_TOKEN__"
    volumeMounts:
    - name: work-volume
      mountPath: /workspace

  containers:
  - name: publisher
    image: umut98/nexus-publisher:latest 
    env:
    - name: NEXUS_USERNAME
      value: __NEXUS_USERNAME__
    - name: NEXUS_PASSWORD
      value: __NEXUS_PASSWORD__
    - name: CONTEXT_SUB_PATH_RELATIVE
      value: __CONTEXT_SUB_PATH_RELATIVE__
    - name: SERVICE_TYPE
      value: __SERVICE_TYPE__
    - name: PACKAGE_VERSION
      value: __PACKAGE_VERSION__
    - name: TARGET_REPO_URL
      value: __TARGET_REPO_URL__
    - name: PYPI_GROUP_URL
      value: __PYPI_GROUP_URL__
    - name: NPM_GROUP_URL
      value: __NPM_GROUP_URL__
    - name: FRONTEND_ARTIFACT_REPO_URL
      value: __FRONTEND_ARTIFACT_REPO_URL__
    - name: BUILD_ID
      value: "__BUILD_ID__"

    command: ["/bin/bash", "-c"]
    args:
      - |
        set -ex

        # cd "/workspace/source/$CONTEXT_SUB_PATH_RELATIVE/" 
        # echo -n "$CONTEXT_SUB_PATH_RELATIVE"
        # if [ "$SERVICE_TYPE" = "frontend" ]; then
        #   # --- FRONTEND YAYINLAMA MANTIĞI ---
        #   echo ">>> Frontend artifact publishing process started."
          
        #   # .npmrc dosyasını burada oluşturmak daha güvenli
        #   echo ">>> Creating .npmrc for Nexus authentication..."
        #   npm config set registry "$NPM_GROUP_URL"
        #   AUTH_TOKEN=$(echo -n "$NEXUS_USERNAME:$NEXUS_PASSWORD" | base64)
        #   echo "_auth=$AUTH_TOKEN" >> ./.npmrc
        #   echo "always-auth=true" >> ./.npmrc
          
        #   npm install
        #   npm run build
          
        #   ARTIFACT_NAME="frontend-$BUILD_ID.tar.gz"
        #   # 'dist' klasörünün bir üst dizinine çıkıp oradan tar komutunu çalıştırıyoruz.
        #   tar -czvf "/workspace/source/$ARTIFACT_NAME" -C dist .
          
        #   echo "Artifact created: $ARTIFACT_NAME"

        #   UPLOAD_URL="$FRONTEND_ARTIFACT_REPO_URL/$ARTIFACT_NAME"
        #   echo "Uploading $ARTIFACT_NAME to $UPLOAD_URL"
        #   curl -v --fail -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" --upload-file "/workspace/source/$ARTIFACT_NAME" "$UPLOAD_URL"

        # else
        #   # --- MEVCUT PYTHON YAYINLAMA MANTIĞI ---
        #   echo ">>> Python package publishing process started."
        #   sed -i "s/version=['\"].*['\"]/version='$PACKAGE_VERSION'/" setup.py
        #   pip install --no-cache-dir --index-url "$PYPI_GROUP_URL" --trusted-host "nexus-repository-manager.nexus" wheel twine
        #   python setup.py sdist bdist_wheel
          
        #   export TWINE_USERNAME="$NEXUS_USERNAME"
        #   export TWINE_PASSWORD="$NEXUS_PASSWORD"
        #   twine upload --repository-url "$TARGET_REPO_URL" dist/*
        # fi
        
        # echo ">>> Publishing process completed successfully."

  volumes:
  - name: work-volume
    emptyDir: {}