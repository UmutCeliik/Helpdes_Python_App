apiVersion: v1
kind: Pod
metadata:
  name: __POD_NAME__
  namespace: ado-agents
  labels:
    app: nexus-publisher
spec:
  restartPolicy: Never
  serviceAccountName: ado-agent-sa
  
  initContainers:
  - name: git-cloner
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      set -ex
      GIT_REPO_URL_WITH_TOKEN=$(echo "__GIT_REPO_URL__" | sed "s,https://,https://__AZP_TOKEN__@,")
      git clone "$GIT_REPO_URL_WITH_TOKEN" /workspace/source
    env:
    - name: GIT_REPO_URL_WITH_TOKEN
      value: __GIT_REPO_URL_WITH_TOKEN__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace

  containers:
  - name: publisher
    image: umut98/nexus-publisher:latest # YENİ OLUŞTURDUĞUNUZ İMAJ
    env:
    # --- Ortak Değişkenler ---
    - name: NEXUS_USERNAME
      value: __NEXUS_USERNAME__
    - name: NEXUS_PASSWORD
      value: __NEXUS_PASSWORD__
    - name: CONTEXT_SUB_PATH_RELATIVE
      value: __CONTEXT_SUB_PATH_RELATIVE__
    - name: SERVICE_TYPE # YENİ: 'backend' veya 'frontend' olacak
      value: __SERVICE_TYPE__
    # --- Python'a Özel Değişkenler ---
    - name: PACKAGE_VERSION
      value: __PACKAGE_VERSION__
    - name: TARGET_REPO_URL
      value: __TARGET_REPO_URL__
    - name: PYPI_GROUP_URL
      value: __PYPI_GROUP_URL__
    # --- Frontend'e Özel Değişkenler ---
    - name: NPM_GROUP_URL # YENİ
      value: __NPM_GROUP_URL__
    - name: FRONTEND_ARTIFACT_REPO_URL # YENİ
      value: __FRONTEND_ARTIFACT_REPO_URL__
    - name: BUILD_ID # YENİ
      value: __BUILD_ID__

    command: ["/bin/bash", "-c"]
    args:
      - |
        set -ex
        cd "/workspace/source/$CONTEXT_SUB_PATH_RELATIVE/"
        
        if [ "$SERVICE_TYPE" = "frontend" ]; then
          # --- FRONTEND YAYINLAMA MANTIĞI ---
          echo ">>> Frontend artifact publishing process started."
          
          # Nexus'u kullanarak bağımlılıkları yükle
          npm config set registry "$NPM_GROUP_URL"
          npm install

          # Projeyi build et
          npm run build
          
          # dist klasörünü versiyonlu bir tar.gz dosyası yap
          ARTIFACT_NAME="frontend-$BUILD_ID.tar.gz"
          tar -czvf "../$ARTIFACT_NAME" dist
          cd ..
          echo "Artifact created: $ARTIFACT_NAME"

          # Artifact'ı Nexus Raw Repository'ye yükle
          UPLOAD_URL="$FRONTEND_ARTIFACT_REPO_URL/$ARTIFACT_NAME"
          echo "Uploading $ARTIFACT_NAME to $UPLOAD_URL"
          curl -v --fail -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" --upload-file "$ARTIFACT_NAME" "$UPLOAD_URL"

        else
          # --- MEVCUT PYTHON YAYINLAMA MANTIĞI ---
          echo ">>> Python package publishing process started."
          sed -i "s/version=['\"].*['\"]/version='$PACKAGE_VERSION'/" setup.py
          pip install --no-cache-dir --index-url "$PYPI_GROUP_URL" --trusted-host "nexus-repository-manager.nexus" wheel twine
          python setup.py sdist bdist_wheel
          
          export TWINE_USERNAME="$NEXUS_USERNAME"
          export TWINE_PASSWORD="$NEXUS_PASSWORD"
          twine upload --repository-url "$TARGET_REPO_URL" dist/*
        fi
        
        echo ">>> Publishing process completed successfully."

  volumes:
  - name: work-volume
    emptyDir: {}