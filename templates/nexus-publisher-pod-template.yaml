# templates/nexus-publisher-pod-template.yaml (GÜNCELLENMİŞ - Final Düzeltme)
# Bu şablon, gizli değişkenlerin doğrudan pipeline tarafından doldurulmasına izin verecek şekilde güncellenmiştir.
apiVersion: v1
kind: Pod
metadata:
  name: __POD_NAME__
  namespace: ado-agents
  labels:
    app: nexus-publisher
spec:
  restartPolicy: Never
  serviceAccountName: ado-agent-sa
  
  initContainers:
  - name: git-cloner
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      set -ex
      echo "Cloning repository..."
      git clone "$GIT_REPO_URL_WITH_TOKEN" /workspace/source
      echo "Source code cloned successfully."
    env:
    # Bu değişken, build-service-job.yml'de dinamik olarak doldurulur.
    - name: GIT_REPO_URL_WITH_TOKEN
      value: __GIT_REPO_URL_WITH_TOKEN__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace

  containers:
  - name: publisher
    image: umut98/nexus-publisher:latest
    env:
    - name: NEXUS_USERNAME
      value: __NEXUS_USERNAME__
    - name: NEXUS_PASSWORD
      value: __NEXUS_PASSWORD__
    - name: CONTEXT_SUB_PATH_RELATIVE
      value: __CONTEXT_SUB_PATH_RELATIVE__
    - name: PACKAGE_VERSION
      value: __PACKAGE_VERSION__
    - name: TARGET_REPO_URL
      value: __TARGET_REPO_URL__
    - name: PYPI_GROUP_URL
      value: __PYPI_GROUP_URL__
    - name: NEXUS_HOST
      value: __NEXUS_HOST__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - |
        set -ex
        cd "/workspace/source/$CONTEXT_SUB_PATH_RELATIVE/"
        echo "--- Current Directory: $(pwd) ---"
        echo "Updating version in setup.py to '$PACKAGE_VERSION'"
        sed -i "s/version=['\"].*['\"]/version='$PACKAGE_VERSION'/" setup.py
        echo "--- Installing build tools ---"
        pip install --no-cache-dir --index-url "$PYPI_GROUP_URL" --trusted-host "$NEXUS_HOST" wheel twine
        echo "--- Building the package ---"
        python setup.py sdist bdist_wheel
        echo "--- Publishing to Nexus ---"
        export TWINE_USERNAME="$NEXUS_USERNAME"
        export TWINE_PASSWORD="$NEXUS_PASSWORD"

        # Twine çıktısını bir dosyaya yönlendir ve bu dosyayı oku
        # twine upload komutunun exit code'u 0 değilse, exit 1 ile shell'i durdur.
        if ! twine upload --repository-url "$TARGET_REPO_URL" dist/* 2>&1 | tee twine_output.log; then
            echo "ERROR: Twine upload failed. See twine_output.log above for details."
            # Logu pipeline'a hata olarak işaretle
            echo "##vso[task.logissue type=error;]Twine upload operation failed."
            exit 1
        fi

        # Başarılı olursa log dosyasını da göster
        cat twine_output.log
        echo "Artifacts published successfully."

        # Konteynerin doğru şekilde kapanmasını sağla
        exec sleep 5 # Küçük bir bekleme süresi ve ardından exec ile konteynerin kapanmasını bekle
  volumes:
  - name: work-volume
    emptyDir: {}
