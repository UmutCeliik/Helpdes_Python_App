apiVersion: v1
kind: Pod
metadata:
  name: __POD_NAME__
  namespace: ado-agents
  labels:
    app: nexus-publisher
spec:
  restartPolicy: Never
  serviceAccountName: ado-agent-sa
  
  initContainers:
  - name: git-cloner
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      set -e
      GIT_REPO_URL_WITH_TOKEN=$(echo "$GIT_REPO_URL" | sed "s,https://,https://$AZP_TOKEN@,")
      echo "Cloning repository from $GIT_REPO_URL into /workspace/src..."
      git clone "$GIT_REPO_URL_WITH_TOKEN" /workspace/src/
      if [ -n "$CONTEXT_SUB_PATH_RELATIVE" ]; then
        echo "Source code cloned into /workspace/src/$CONTEXT_SUB_PATH_RELATIVE."
      fi
      echo "Source code cloned successfully."
    env:
    - name: GIT_REPO_URL
      value: __GIT_REPO_URL__
    - name: AZP_TOKEN
      value: __AZP_TOKEN__
    - name: CONTEXT_SUB_PATH_RELATIVE
      value: __CONTEXT_SUB_PATH_RELATIVE__
    volumeMounts:
    - name: work-volume
      mountPath: /workspace

  containers:
  - name: publisher
    image: umut98/nexus-publisher:latest
    env:
    - name: NEXUS_USERNAME
      value: __NEXUS_USERNAME_VAR__
    - name: NEXUS_PASSWORD
      value: __NEXUS_PASSWORD_VAR__
    - name: NEXUS_URL
      value: "http://nexus-repository-manager.nexus:8081"
    - name: SERVICE_NAME
      value: __SERVICE_NAME__
    - name: BUILD_ID 
      value: "__BUILD_ID__"
    volumeMounts:
    - name: work-volume
      mountPath: /workspace
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -e
      
      # --- YENİ EKLENEN HATA AYIKLAMA KOMUTLARI ---
      echo "--- Hata Ayıklama Bilgisi ---"
      echo "cd komutu öncesi mevcut dizin: $(pwd)"
      echo "Init Container tarafından klonlanan /workspace/src/ içeriği:"
      ls -l /workspace/src/
      
      if [ -n "$CONTEXT_SUB_PATH_RELATIVE" ]; then
        TARGET_CD_PATH="/workspace/src/$CONTEXT_SUB_PATH_RELATIVE/"
      else
        TARGET_CD_PATH="/workspace/src/"
      fi
      
      echo "Hedeflenecek dizin: $TARGET_CD_PATH"
      if [ -d "$TARGET_CD_PATH" ]; then
          echo "$TARGET_CD_PATH dizin içeriği:"
          ls -l "$TARGET_CD_PATH"
      else
          echo "$TARGET_CD_PATH dizini mevcut değil."
      fi
      echo "-----------------------------"
      # --- Hata Ayıklama Komutları Sonu ---

      # Kaynak kod dizinine geç
      if [ -n "$CONTEXT_SUB_PATH_RELATIVE" ]; then
        cd "/workspace/src/$CONTEXT_SUB_PATH_RELATIVE/"
      else
        cd "/workspace/src/"
      fi

      echo "cd komutu sonrası mevcut dizin: $(pwd)"
      echo "Mevcut dizin içeriği:"
      ls -l .
      echo "-----------------------------"

      echo "Building Python distribution for $SERVICE_NAME..."

      if [ -n "$BUILD_ID" ]; then
        echo "Using dynamic version: 0.1.0.$BUILD_ID"
        sed -i "s#^    version='.*',#    version='0.1.0.$BUILD_ID',#" setup.py
      else
        echo "WARNING: BUILD_ID not found. Using static version from setup.py."
      fi

      NEXUS_PYPI_INDEX_URL="http://${NEXUS_USERNAME_VAR}:${NEXUS_PASSWORD_VAR}@nexus-repository-manager.nexus:8081/repository/pypi-all/"
      echo "Configuring pip to use Nexus as package index: $NEXUS_PYPI_INDEX_URL"
      
      pip install --index-url "$NEXUS_PYPI_INDEX_URL" --trusted-host nexus-repository-manager.nexus --no-cache-dir -r requirements.txt
      pip install --index-url "$NEXUS_PYPI_INDEX_URL" --trusted-host nexus-repository-manager.nexus --no-cache-dir wheel twine

      python setup.py sdist bdist_wheel
      
      echo "Publishing Python artifacts to Nexus hosted repository..."
      TWINE_USERNAME="$NEXUS_USERNAME" TWINE_PASSWORD="$NEXUS_PASSWORD" twine upload \
                               --repository-url "$NEXUS_URL/repository/helpdesk-python-hosted/" \
                               dist/*
      echo "Python artifacts published successfully to Nexus."

  volumes:
  - name: work-volume
    emptyDir: {}